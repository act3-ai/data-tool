include:
  - project: devsecops/cicd/pipeline
    ref: v19.0.37
    file:
      - main.yml
      - homebrew.yml

############################################################
# Code scanning jobs
############################################################

renovate:
  variables:
    RENOVATE_ASSIGNEES: "njoslin"

project tool blueprint lint:
  rules:
    - when: never

############################################################
# Tests
############################################################

golang unit test:
  variables:
    KUBERNETES_CPU_REQUEST: 4
    KUBERNETES_CPU_LIMIT: 16
    KUBERNETES_MEMORY_REQUEST: 8Gi
    KUBERNETES_MEMORY_LIMIT: 64Gi
    GOMAXPROCS: 16
    GOMEMLIMIT: 68719476736 # 64*(2^30)
  before_script:
    - apt update
    - apt install -y git-lfs
  artifacts:
    expose_as: "unit test coverage"

functional test:
  extends: golang unit test
  variables:
    TEST_REGISTRY: registry:5000
    TEST_TELEMETRY: http://telemetry:8100
    REGISTRY_STORAGE_DELETE_ENABLED: "true"
  services:
    - name: ${IMAGE_REPO_BASE}docker.io/library/registry:2
      alias: registry
      # entrypoint: ["something"]
      # command: ["start"]
    - name: ${CI_REGISTRY}/ace/data/telemetry:latest
      alias: telemetry
      command: ["serve", "-v"]
      variables:
        ACE_TELEMETRY_VERBOSITY: "4"
        ACE_TELEMETRY_DSN: "file::memory:"
  # We change the names of the file to (I think) not conflict with the coverage results from the unit tests
  after_script:
    - ls
    - cp report.txt functional_report.txt
    - cp report.xml functional_report.xml
    - cp coverage.txt functional_coverage.txt
    - cp coverage.html functional_coverage.html
    - cp coverage.xml functional_coverage.xml
  artifacts:
    when: always
    expose_as: "functional test coverage"
    paths:
      - functional_report.txt
      - functional_report.xml
      - functional_coverage.txt
      - functional_coverage.html
      - functional_coverage.xml
      - cmd/ace-dt/log/
    reports:
      coverage_report:
        coverage_format: cobertura
        path: functional_coverage.xml
      junit: functional_report.xml

# integration test with telemetry
integration test:
  extends: golang unit test
  variables:
    TEST_REGISTRY: registry:5000
    ACE_DT_TELEMETRY_URL: http://telemetry:8100
    ACE_DT_TELEMETRY_USERNAME: ci-test-user
    ACE_DT_HIDE_PROGRESS: "true"
    ACE_TELEMETRY_LISTEN: ":8100"
    ACE_TELEMETRY_DSN: file:/tmp/test.db
  services:
    - name: ${IMAGE_REPO_BASE}docker.io/library/registry:2
      alias: registry
    - name: ${CI_REGISTRY}/ace/data/telemetry:latest
      alias: telemetry
      command: ["serve", "-v"]
  before_script:
    - mkdir ~/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > ~/.docker/config.json
    - mkdir -p ~/.config/ace/dt
    - | 
      cat << EOF > ~/.config/ace/dt/config.yaml
      apiVersion: config.dt.act3-ace.io/v1alpha1
      kind: Configuration
 
      registryConfig:
        registries:
          $TEST_REGISTRY:
            endpoints:
              - http://$TEST_REGISTRY
      EOF
  script: 
    - !reference [.go_create_netrc, script]
    # ace-dt login only supports interactive login
    # - go run ./cmd/ace-dt login $CI_REGISTRY --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD"
    # This tests an authenticated pull using custom config
    - go run ./cmd/ace-dt bottle -v=2 pull ${CI_REGISTRY}/ace/data/tool/bottle/mnist:v1.6 -d bottle
    - go run ./cmd/ace-dt bottle -v=2 push ${TEST_REGISTRY}/bottle/mnist:v1.6 -d bottle
    # add a newline
    - cat bottle/.dt/bottleid ; echo
    - curl -sSfvo location.txt ${ACE_DT_TELEMETRY_URL}/api/location?bottle_digest=$(cat bottle/.dt/bottleid)
    - cat location.txt
    - grep ${CI_REGISTRY}/ace/data/tool/bottle/mnist location.txt
    # remote http:// prefix
    - grep ${TEST_REGISTRY#"http://"}/bottle/mnist location.txt
    - go run ./cmd/ace-dt bottle pull bottle:$(cat bottle/.dt/bottleid) -d bottle-pull
  artifacts:
    when: always
    expose_as: "integration test"
    paths:
      - bottleid
      - location.txt
    reports: {}

############################################################
# Build jobs
############################################################

build binaries:
  extends: .go build
  variables:
    EXECUTABLE: ace-dt
    CGO_ENABLED: 0
  parallel:
    matrix:
      - GOOS:
          - linux
          - windows
          - darwin
        GOARCH:
          - amd64
          - arm64

build fips linux/amd64:
  extends: .go build fips
  variables:
    EXECUTABLE: ace-dt
  
build fips linux/arm64:
  extends: .go build fips
  variables:
    EXECUTABLE: ace-dt
    GOARCH: arm64
    CC: aarch64-linux-gnu-gcc
  before_script:
    - apt update
    - apt install -y gcc-aarch64-linux-gnu

build with ko:
  variables:
    KUBERNETES_CPU_REQUEST: 4
    KUBERNETES_CPU_LIMIT: 8
    KUBERNETES_MEMORY_REQUEST: 8Gi
    KUBERNETES_MEMORY_LIMIT: 16Gi
    GOMAXPROCS: 8
    GOMEMLIMIT: 17179869184 # 16*(2^30)

############################################################
# Release jobs
############################################################

generate go package docs:
  extends: .generate_go_package_docs
  variables:
    OUTPUT_DIR: docs/pkg

build docs:
  before_script:
    - pip install mdx_truly_sane_lists

pages:
  stage: Deploy
  needs:
    - generate go package docs
    - golang unit test
  rules:
    # Skip release commits
    - if: !reference [.release_commit_rule]
      when: never
    # Run for all commits to default branch
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH && $DEP_CHECK != "true"'
  image: cgr.dev/chainguard/wolfi-base
  script:
    - mkdir public
    - cp -r docs/pkg/ public/pkg/
    - cp coverage.html public
    - echo "Pages accessible through ${CI_PAGES_URL}/${PAGES_PREFIX}"
    - echo "Go package docs available at ${CI_PAGES_URL}/${PAGES_PREFIX}/pkg"
  artifacts:
    paths:
      - public

generate docs:
  stage: Semantic Release
  rules: !reference [semantic release, rules]
  image: !reference [.go build, image]
  dependencies:
    - build binaries
  script:
    - |
      if [ "$DO_RELEASE" != "true" ]; then
        echo "DO_RELEASE is not set. Skipping...";
        exit 0;
      fi
    - rm docs/cli/*
    - HOME=HOMEDIR ci-dist/ace-dt/linux/amd64/bin/ace-dt gendocs md --only-commands docs/cli/
    - make apidoc
  artifacts:
    paths:
      - docs
    when: on_success

semantic release:
  image:
    name: reg.git.act3-ace.com/devsecops/cicd/images/ci-go-semantic
  before_script:
    - !reference [.go_create_netrc, script]
  dependencies:
    - generate docs

update homebrew formula:
  variables:
    NAME: ace-dt

mattermost notification:
  stage: Release
  needs:
    - create release
  image:
    name: reg.git.act3-ace.com/devsecops/cicd/images/ci-utils:v1.0.62
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v([0-9]+)\.([0-9]+)\.([0-9]+)$|^v([0-9]+)\.([0-9]+)\.([0-9]+)-.*$/ && $DEP_CHECK != "true"'
  variables:
    ICON_URL: https://git.act3-ace.com/uploads/-/system/project/avatar/238/images-1.jpeg?width=96
    MM_USERNAME: Ace Data Releases
    MM_CHANNEL: ace-dt
  script:
    - while ! curl -I -s --header "JOB-TOKEN:$CI_JOB_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases/$CI_COMMIT_TAG" | grep "HTTP/2 200"; do
        echo "waiting for release..";
        sleep 2;
      done
    - export RELEASE_NOTES=$(curl -s --header "JOB-TOKEN:$CI_JOB_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases/$CI_COMMIT_TAG" | yq '.description')
    - curl -i -X POST -H "Content-Type:application/json"
      -d "{
      \"username\":\"$MM_USERNAME\",
      \"channel\":\"$MM_CHANNEL\",
      \"text\":\"ðŸŽ‰ **$CI_PROJECT_PATH [$CI_COMMIT_TAG]($CI_PROJECT_URL/-/releases/$CI_COMMIT_TAG)has been released.** ðŸŽ‰\n$RELEASE_NOTES\",
      \"icon_url\":\"$ICON_URL\"
      }" 
      "$MATTERMOST_WEBHOOK"
