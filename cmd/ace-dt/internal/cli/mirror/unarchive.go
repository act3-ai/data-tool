package mirror

import (
	"context"

	"github.com/spf13/cobra"

	"github.com/act3-ai/data-tool/cmd/ace-dt/internal/cli/internal/ui"
	actions "github.com/act3-ai/data-tool/internal/actions/mirror"
)

// newArchiveCmd represents the mirror archive command.
func newUnarchiveCmd(tool *actions.Action) *cobra.Command {
	action := &actions.Unarchive{Action: tool}
	uiOptions := ui.Options{}

	cmd := &cobra.Command{
		Use:   "unarchive TAR-FILE MAPPER",
		Short: "Efficiently scatters images listed in a TAR-FILE according to the MAPPER",
		Long: `Efficiently scatters images listed in a TAR-FILE according to the MAPPER
		Because this is a combination of mirror deserialize and mirror scatter, it inherits all of the flags and options defined in those commands.
TAR-FILE is the name of the TAR file to be created on the local system.

The MAPPER types currently supported are nest, first-prefix (csv format), digests (csv format) and go-template.
The format of MAPPER is MAP-TYPE=MAP-ARG

If MAP-TYPE is "nest" then scatter will nest all the images under MAP-ARG.
For example, is MAP-ARG is "reg.other.com" then a gathered image "foo.com/bar" will map to "reg.other.com/foo.com/bar".

Passing a first-prefix MAPPER requires a csv file that has formatted lines of: source,destination. 
The ace-dt mirror scatter will send the source reference to the first prefix match that it makes.
This format also allows defining the source as a digest that is present in the source repository.

Passing a digests MAP-FILE requires a csv file that has formatted lines of: digest-string, destination.
Scatter will send each digest to the locations defined in the map file provided. 

Passing a go-template MAP-FILE allows greater flexibility in how references can be pushed
to destination repositories. Hermetic text Sprig functions are currently supported which allows for matching by 
prefix, digest, media-type, regex, etc.  The following additional functions are provided:

The optional reference flag is a sync tag to assign to the artifact when it is stored in CAS. E.g., "sync-1". 
`,
		Example: `
		To nest all the images in a tar artifact under "reg.other.com/mirror" you can use
		ace-dt mirror unarchive file.tar nest=reg.other.com/mirror

		To scatter the images in a tar artifact according to a go template named file.tmpl, you can use
		ace-dt mirror unarchive file.tar go-template=file.tmpl
`,

		Args: cobra.ExactArgs(2),
		RunE: func(cmd *cobra.Command, args []string) error {
			return ui.RunUI(cmd.Context(), uiOptions, func(ctx context.Context) error {
				return action.Run(ctx, args[0], args[1])
			})
		},
	}
	cmd.PersistentFlags().StringVar(&action.SubsetFile, "subset", "", "Define a subset list of images to scatter with a sources.list file")
	cmd.PersistentFlags().BoolVar(&action.DryRun, "check", false, "Dry run- do not actually send to destination repositories")
	cmd.PersistentFlags().StringSliceVarP(&action.Selectors, "selector", "l", []string{}, "Only scatter manifests tagged with annotation labels, e.g., component=core,module=test")
	cmd.Flags().IntVar(&action.BufferSize, "block-size", 0, "Size of read buffer.  If 0 then no buffer is used.")
	cmd.Flags().BoolVar(&action.Strict, "strict", false, "Enable strict checking mode.  This will often only work if the tar stream was generated by \"ace-dt mirror serialize\".")
	cmd.Flags().StringVar(&action.Reference, "reference", "latest", "Tag the gathered image on disk with this reference, if not set, latest will be used.")

	ui.AddOptionsFlags(cmd.Flags(), &uiOptions)

	return cmd
}
