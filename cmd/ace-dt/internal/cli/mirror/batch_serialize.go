package mirror

import (
	"context"

	"github.com/spf13/cobra"

	"gitlab.com/act3-ai/asce/data/tool/cmd/ace-dt/internal/cli/internal/ui"
	actions "gitlab.com/act3-ai/asce/data/tool/internal/actions/mirror"
)

// newSerializeCmd represents the mirror serialize command.
func newBatchSerializeCmd(tool *actions.Action) *cobra.Command {
	action := &actions.BatchSerialize{Action: tool}
	uiOptions := ui.Options{}

	cmd := &cobra.Command{
		Use:   "batch-serialize BATCH-LIST SYNC-DIRECTORY",
		Short: "Serialize multiple gather artifacts to a common folder while avoiding serializing duplicate blobs.",
		Long: `Serialize multiple gather artifacts to a common folder while avoiding serializing duplicate blobs.
		BATCH-LIST is a CSV file of gather artifacts to serialize. It expects 2 columns: the name and the artifact location. For example:

		name, artifact
		tools, reg.example.com/dev-tools:v3.3.1
		ops, reg.example.com/ops/devops:v0.5.7
		
		Artifact names are important and for synchronization purposes should be kept consistent for each unique artifact. 
		The same artifact name can exist multiple times in a BATCH-LIST, however, only the latest instance of that particular image will be serialized. It is good practice to maintain a single image name to a single artifact reference. 
		In the above BATCH-LIST, if reg.example.com/dev-tools:v3.3.0 exists in the tracker-file, only the artifacts reg.example.com/ops/devops:v0.5.7 and reg.example.com/dev-tools:v3.3.1 will be serialized. 
		
		SYNC-DIRECTORY is the local repository in which to store the tar files.

		All artifacts in the BATCH-LIST will be serialized to the SYNC-DIRECTORY unless they exist (meaning that they have been serialized already) in the tracker-file (default: SYNC-DIRECTORY/recordKeeping.csv) that is generated by ace-dt. 
`,
		Example: `ace-dt mirror batch-serialize gather.csv sync/data
		`,
		Args: cobra.MinimumNArgs(2),
		RunE: func(cmd *cobra.Command, args []string) error {

			return ui.RunUI(cmd.Context(), uiOptions, func(ctx context.Context) error {
				return action.Run(ctx, args[0], args[1])
			})
		},
	}
	ui.AddOptionsFlags(cmd.Flags(), &uiOptions)
	cmd.Flags().StringVar(&action.TrackerFile, "tracker-filename", "record-keeping.csv", "used to override the default tracker-file name. Tracker file exists or will be created in the SYNC-DIRECTORY/data/ directory.")
	cmd.Flags().StringVar(&action.Compression, "compression", "", "Supports zstd and gzip compression methods. (Default behavior is no compression.)")
	cmd.Flags().BoolVar(&action.WithManifestJSON, "manifest-json", false, "Save a manifest.json file similar to the output of 'ctr images export' (fully compatible) or 'docker image save' (not fully compatible). Recommended to be used on images gathered with one platform specified.")

	return cmd
}
