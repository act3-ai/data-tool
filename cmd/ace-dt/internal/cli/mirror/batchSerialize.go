package mirror

import (
	"context"

	"github.com/spf13/cobra"

	"git.act3-ace.com/ace/data/tool/cmd/ace-dt/internal/cli/internal/ui"
	actions "git.act3-ace.com/ace/data/tool/internal/actions/mirror"
)

// newSerializeCmd represents the mirror serialize command.
func newBatchSerializeCmd(tool *actions.Action) *cobra.Command {
	action := &actions.BatchSerialize{Action: tool}
	uiOptions := ui.Options{}

	cmd := &cobra.Command{
		Use:   "batch-serialize BATCH-LIST SYNC-DIRECTORY",
		Short: "Serialize multiple images to a common folder while avoiding serializing duplicate blobs.",
		Long: `Serialize multiple images to a common folder while avoiding serializing duplicate blobs.
		BATCH-LIST is a CSV file of images to serialize. It has 2 columns: name and image. For example:
		name, image
		image1, reg.example.com/image1:v3.3.0
		image2, reg.example.com/image2:v0.5.7
		
		SYNC-DIRECTORY is the local repository in which to store the tar files.

		All images in the BATCH-LIST will be serialized to the SYNC-DIRECTORY. 
		If a tracker file exists (generated by the mirror batch-serialize command), it will skip any blobs that have already been serialized in previous images to avoid duplicate work.
`,
		Example: `ace-dt mirror batch-serialize gather.csv sync/data`,
		Args:    cobra.MinimumNArgs(2),
		RunE: func(cmd *cobra.Command, args []string) error {

			return ui.RunUI(cmd.Context(), uiOptions, func(ctx context.Context) error {
				return action.Run(ctx, args[0], args[1])
			})
		},
	}
	ui.AddOptionsFlags(cmd.Flags(), &uiOptions)
	cmd.Flags().StringVar(&action.TrackerFile, "tracker-filename", "recordKeeping.csv", "used to override the default tracker-file name. Tracker file exists or will be created in the SYNC-DIRECTORY/data/ directory.")

	return cmd
}
