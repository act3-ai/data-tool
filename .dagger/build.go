package main

import (
	"context"
	"dagger/tool/internal/dagger"
	"fmt"
	"path"
	"strings"

	"github.com/sourcegraph/conc/pool"
	"oras.land/oras-go/v2/registry"
)

// Generate a directory of ace-dt executables built for all supported platforms, concurrently.
//
//	 Platform Matrix:
//
//		GOOS: linux, windows, darwin
//		GOARCH: amd64, arm64
func (t *Tool) BuildPlatforms(ctx context.Context,
	// Snapshot build, skipping goreleaser validations. Useful for building committed git history that isn't tagged with a release, a dirty repo does an "auto-snapshot".
	// +optional
	snapshot bool,
) *dagger.Directory {
	return dag.Goreleaser(t.Source).
		Build().
		WithAutoSnapshot().
		All()
}

// Build an executable for the specified platform, named "ace-dt-v{VERSION}-{GOOS}-{GOARCH}".
//
// Supported Platform Matrix:
//
//	GOOS: linux, windows, darwin
//	GOARCH: amd64, arm64
func (t *Tool) Build(ctx context.Context,
	// Build target platform
	// +optional
	// +default="linux/amd64"
	platform dagger.Platform,
	// snapshot build, skip goreleaser validations
	// +optional
	snapshot bool,
) *dagger.File {
	return build(ctx, t.Source, platform, snapshot)
}

// Create an image with an ace-dt executable.
func (t *Tool) Image(ctx context.Context,
	// image version
	version string,
	// Build target platform
	// +optional
	// +default="linux/amd64"
	platform dagger.Platform,
) *dagger.Container {
	ctr := dag.Container(dagger.ContainerOpts{Platform: platform}).
		From(imageChainguard).
		WithFile("/usr/local/bin/ace-dt", t.Build(ctx, platform, false)).
		WithEntrypoint([]string{"ace-dt"}).
		WithWorkdir("/")
	return withCommonLabels(ctr, version)
}

// Create and publish a multi-platform image index.
func (t *Tool) ImageIndex(ctx context.Context,
	// image version
	version string,
	// build platforms
	platforms []dagger.Platform,
	// OCI Reference, without tag
	address string,
	// extraTags
	// +optional
	extraTags []string,
) (string, error) {
	ref, err := registry.ParseReference(address)
	if err != nil {
		return "", fmt.Errorf("parsing address: %w", err)
	}
	imgURL := "https://" + path.Join(ref.Registry, ref.Repository)

	p := pool.NewWithResults[*dagger.Container]().WithContext(ctx)
	for _, platform := range platforms {
		p.Go(func(ctx context.Context) (*dagger.Container, error) {
			img := t.Image(ctx, version, platform).
				WithLabel("org.opencontainers.image.url", imgURL).
				WithLabel("org.opencontainers.image.source", "https://github.com/act3-ai/data-tool")
			return img, nil
		})
	}

	platformVariants, err := p.Wait()
	if err != nil {
		return "", fmt.Errorf("building images: %w", err)
	}

	var result strings.Builder
	result.WriteString("Successfully published image index to:\n")
	for _, tag := range append([]string{version}, extraTags...) {
		ref := fmt.Sprintf("%s:%s", address, tag)
		r, err := dag.Container().
			Publish(ctx, ref, dagger.ContainerPublishOpts{
				PlatformVariants: platformVariants,
			})
		if err != nil {
			return "", fmt.Errorf("publishing index to %s: %w", ref, err)
		}
		result.WriteString(r)
		result.WriteString("\n")
	}
	return result.String(), nil

}

func build(ctx context.Context,
	src *dagger.Directory,
	platform dagger.Platform,
	// snapshot build, skip goreleaser validations
	snapshot bool,
) *dagger.File {
	return dag.Goreleaser(src).
		Build().
		WithTimeout("10m").
		WithAutoSnapshot().
		With(func(r *dagger.GoreleaserBuild) *dagger.GoreleaserBuild {
			if snapshot {
				r = r.WithSnapshot()
			}
			return r
		}).
		Platform("ace-dt", dagger.GoreleaserBuildPlatformOpts{Platform: platform})
}

// binaryName constructs the name of a ace-dt executable, as generated by goreleaser.
func binaryName(platform string) string {
	str := strings.Builder{}
	str.WriteString("ace-dt")

	if platform != "" {
		platform = strings.ReplaceAll(string(platform), "/", "-")
		str.WriteString("-")
		str.WriteString(platform)
	}

	return str.String()
}

// withCommonLabels applies common labels to a container, e.g. maintainers, vendor, etc.
func withCommonLabels(ctr *dagger.Container, version string) *dagger.Container {
	return ctr.
		WithLabel("maintainers", "Nathan D. Joslin <nathan.joslin@udri.udayton.edu>").
		WithLabel("org.opencontainers.image.vendor", "AFRL ACT3").
		WithLabel("org.opencontainers.image.version", version).
		WithLabel("org.opencontainers.image.title", "Tool").
		WithLabel("org.opencontainers.image.url", "ghcr.io/act3-ai/data-tool").
		WithLabel("org.opencontainers.image.source", "https://github.com/act3-ai/data-tool").
		WithLabel("org.opencontainers.image.description", "ACE Data Tool")
}
